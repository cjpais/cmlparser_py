import atom
import bond

def print_atoms(atom,extra = False):
    for k in range(0,len(atom)):
       print "Atom id: %s" % atom[k].atom_id
       print "Atom type: %s" % atom[k].atom_type
       print "X position: %s" % atom[k].x_pos
       print "Y position: %s" % atom[k].y_pos
       print "Z position: %s" % atom[k].z_pos
       print "Atoms bonded to %s" % atom[k].atom_bonds
       print "Number of bonds %s" % atom[k].numbonds
       if extra:
           print "OPLS id %s" % atom[k].id
           print "OPLS bond id %s" % atom[k].bond_id
           print "OPLS sigma %s" % atom[k].sigma
           print "OPLS epsilon %s" % atom[k].epsilon
           print "OPLS partial charge %s" % atom[k].partial_charge
       print ""

def print_bonds(bond,boo = False):
    """ Prints a list of bond objects created by create_bondobj

    Keyword Arguments:
    bond -- The list of bond objects to pass in and print
    """
    print "   BONDS   "
    print "-----------"
    for z in range(0, len(bond)):
       print "Bond Type: %s" % bond[z].bond_type
       print "Bond Master(bonded from): %s" % bond[z].bond_master.atom_id
       print "Bond Slave(bonded to): %s" % bond[z].bond_slave.atom_id
       print "Bond Master Type: %s" % bond[z].bond_master.atom_type
       print "Bond Slave Type: %s" % bond[z].bond_slave.atom_type
       print "Bond Number %s" % z
       if boo:
           print "OPLS Force Constant: %s" % bond[z].bond_force_const
           print "OPLS Equilibrium Length: %s" % bond[z].bond_equib_len
       print ""

def print_angles(AngleList,boo = False):
    """
    Given a list of angles, print the angle id's

    Keyword Arguments:
    AngleList -- The list of angles to print
    """
    for x in range(0,len(AngleList)):
        print "Angle number %s" % x
        print "Angle Type: %s" % AngleList[x].Angle_type
        print "Master Angle: %s" % AngleList[x].Angle_master.atom_id
        print "Slave angle 1: %s" % AngleList[x].Angle_slave1.atom_id
        print "Slave angle 2: %s" % AngleList[x].Angle_slave2.atom_id
        if boo:
            if find_atom_by_id(AngleList[x].Angle_slave2).bond_id == "":
                print ""
                continue
            print "Master Angle Bond: %s" % find_atom_by_id(AngleList[x].Angle_master).bond_id
            print "Slave Angle Bond: %s" % find_atom_by_id(AngleList[x].Angle_slave1).bond_id
            print "Slave Angle2 Bond: %s" % find_atom_by_id(AngleList[x].Angle_slave2).bond_id
            if AngleList[x].Angle_equib_len == "":
                print "No good data on these bonds"
                print ""
                continue
            print "Equilibrium length %s" % AngleList[x].Angle_equib_len
            print "Force Constant: %s" % AngleList[x].Angle_force_const
        print ""

def print_dihedrals(dihedrals):
    """ Print the atom id's of a list of dihedrals

    Keyword Arguments:
    dihedrals -- the list of dihedrals to print
    """
    print "DIHEDRALS"
    print "---------"
    for i in range(0,len(dihedrals)):
        print "Dihedral %s: %s" % (i,dihedrals[i])
        print "Dihedral Master1 %s" % (dihedrals[i].dihedral_master1.atom_id)
        print "Dihedral Master2 %s" % (dihedrals[i].dihedral_master2.atom_id)
        print "Dihedral Slave1 %s" % (dihedrals[i].dihedral_slave1.atom_id)
        print "Dihedral Slave2 %s" % (dihedrals[i].dihedral_slave2.atom_id)

def print_ring(rings):
    """ Prints the atom id's from what is contained in the Ring list.

    Keyword Arguments:
    rings -- The list of rings to print and get atom id's from
    """
    print "----------RINGS----------"
    for k in range(0,len(rings)):
        print ""
        print "ring number %d" % k
        print rings[k]
        print rings[k].atom1.atom_id
        print rings[k].atom2.atom_id
        print rings[k].atom3.atom_id
        print rings[k].atom4.atom_id
        print rings[k].atom5.atom_id
        if rings[k].ring_type == 6:
            print rings[k].atom6.atom_id

def print_fused(fused):
    """ Prints the fused rings found by the find_fused method. Is void.

        Keyword Arguments:
        fused - The list of fused rings generated by find_fused
    """
    print "----------FUSED RINGS---------"
    for i in range(0,len(fused)):
        print ""
        print "fused 1 %s" % fused[i].ring1
        print "fused 2 %s" % fused[i].ring2
